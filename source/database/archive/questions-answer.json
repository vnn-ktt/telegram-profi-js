{
  "junior": [
    {
      "id": 1,
      "text": "Для чего используется EventLoop в JavaScript?",
      "hasOptions": false,
      "answer": "EventLoop (цикл событий) - это механизм, который позволяет JavaScript обрабатывать асинхронные операции. Он постоянно проверяет call stack и callback queue. Когда call stack пуст, EventLoop берет первую задачу из очереди и помещает ее в call stack для выполнения."
    },
    {
      "id": 2,
      "text": "Что такое hoisting (поднятие) в JavaScript?",
      "hasOptions": false,
      "answer": "Hoisting - это поведение JavaScript, при котором объявления переменных (var) и функций поднимаются вверх своей области видимости перед выполнением кода. Однако, только объявления поднимаются, а не инициализации."
    },
    {
      "id": 3,
      "text": "В чем разница между let, const и var?",
      "hasOptions": false,
      "answer": "var - function scoped, поднимается (hoisted), можно переопределять. let - block scoped, не поднимается, можно переназначать. const - block scoped, не поднимается, нельзя переназначать, но можно изменять свойства объектов и элементы массивов."
    },
    {
      "id": 4,
      "text": "Что такое замыкание (closure) и приведите пример?",
      "hasOptions": false,
      "answer": "Замыкание - это функция, которая имеет доступ к переменным из внешней области видимости даже после того, как внешняя функция завершила выполнение. Пример: function createCounter() { let count = 0; return function() { return ++count; }; }"
    },
    {
      "id": 5,
      "text": "Что такое Promise и для чего он используется?",
      "hasOptions": false,
      "answer": "Promise - это объект, представляющий результат асинхронной операции. Он может находиться в состоянии pending, fulfilled или rejected. Используется для обработки асинхронных операций и избежания callback hell."
    },
    {
      "id": 6,
      "text": "Объясните разницу между == и ===",
      "hasOptions": false,
      "answer": "== (нестрогое равенство) выполняет преобразование типов перед сравнением. === (строгое равенство) сравнивает значения без преобразования типов. Рекомендуется использовать === для избежания неожиданного поведения."
    },
    {
      "id": 7,
      "text": "Что такое this в JavaScript и как он работает?",
      "hasOptions": false,
      "answer": "this - это ключевое слово, которое ссылается на контекст выполнения функции. Его значение зависит от того, как вызвана функция: в методах объекта - this это объект, в обычных функциях - global object (или undefined в strict mode), в стрелочных функциях - наследуется из внешней области."
    },
    {
      "id": 8,
      "text": "Что такое стрелочные функции и чем они отличаются от обычных?",
      "hasOptions": false,
      "answer": "Стрелочные функции имеют shorter syntax, не имеют своего this (наследуют из внешней области), не имеют arguments object, не могут быть использованы как конструкторы, не имеют prototype property."
    },
    {
      "id": 9,
      "text": "Что такое деструктуризация и приведите пример?",
      "hasOptions": false,
      "answer": "Деструктуризация - это синтаксис для извлечения значений из объектов и массивов в отдельные переменные. Пример: const {name, age} = person; или const [first, second] = array;"
    },
    {
      "id": 10,
      "text": "Что такое async/await и как это работает?",
      "hasOptions": false,
      "answer": "async/await - это синтаксический сахар для работы с Promise. async функция всегда возвращает Promise. await приостанавливает выполнение async функции до разрешения Promise, делая асинхронный код похожим на синхронный."
    },
    {
      "id": 11,
      "text": "Что такое CORS и для чего он нужен?",
      "hasOptions": false,
      "answer": "CORS (Cross-Origin Resource Sharing) - это механизм, который позволяет веб-страницам делать запросы к доменам, отличным от домена самой страницы. Браузеры блокируют cross-origin запросы по умолчанию для безопасности."
    },
    {
      "id": 12,
      "text": "Что такое прототипное наследование в JavaScript?",
      "hasOptions": false,
      "answer": "JavaScript использует прототипное наследование - объекты могут наследовать свойства и методы от других объектов через цепочку прототипов. Каждый объект имеет скрытое свойство [[Prototype]], которое ссылается на его прототип."
    },
    {
      "id": 13,
      "text": "Что такое callback-функция и приведите пример?",
      "hasOptions": false,
      "answer": "Callback-функция - это функция, передаваемая в другую функцию в качестве аргумента и вызываемая позже. Пример: setTimeout(() => { console.log('Callback executed'); }, 1000);"
    },
    {
      "id": 14,
      "text": "Что такое IIFE и для чего используется?",
      "hasOptions": false,
      "answer": "IIFE (Immediately Invoked Function Expression) - это функция, которая выполняется сразу после определения. Используется для создания изолированной области видимости и избежания загрязнения глобального namespace. Пример: (function() { /* code */ })();"
    },
    {
      "id": 15,
      "text": "Что такое event bubbling и event capturing?",
      "hasOptions": false,
      "answer": "Event bubbling - событие всплывает от целевого элемента к document. Event capturing - событие погружается от document к целевому элементу. По умолчанию используется bubbling, но можно использовать capturing через addEventListener с третьим параметром true."
    },
    {
      "id": 16,
      "text": "Что такое localStorage и sessionStorage?",
      "hasOptions": false,
      "answer": "localStorage и sessionStorage - Web Storage API для хранения данных в браузере. localStorage сохраняет данные без срока действия, sessionStorage - только на время сессии (до закрытия вкладки). Данные хранятся в формате ключ-значение."
    },
    {
      "id": 17,
      "text": "Что такое REST API и основные HTTP методы?",
      "hasOptions": false,
      "answer": "REST API - архитектурный стиль для создания веб-сервисов. Основные HTTP методы: GET (получить данные), POST (создать новый ресурс), PUT (обновить ресурс), DELETE (удалить ресурс), PATCH (частичное обновление)."
    },
    {
      "id": 18,
      "text": "Что такое мемоизация и приведите пример?",
      "hasOptions": false,
      "answer": "Мемоизация - это техника оптимизации, при которой результаты дорогостоящих вызовов функций кешируются и возвращаются при повторных вызовах с теми же аргументами. Пример: функция вычисления чисел Фибоначчи с кешированием результатов."
    },
    {
      "id": 19,
      "text": "Что такое JSON и методы для работы с ним?",
      "hasOptions": false,
      "answer": "JSON (JavaScript Object Notation) - текстовый формат для обмена данными. Методы: JSON.stringify() - преобразует объект в JSON строку, JSON.parse() - преобразует JSON строку обратно в объект."
    },
    {
      "id": 20,
      "text": "Что такое CORS и как решать CORS ошибки?",
      "hasOptions": false,
      "answer": "CORS ошибки возникают когда браузер блокирует cross-origin запросы. Решения: настройка CORS на сервере (Access-Control-Allow-Origin), использование proxy, JSONP (для GET запросов), или настройка веб-сервера для разрешения cross-origin запросов."
    }
  ]
}