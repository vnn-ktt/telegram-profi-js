import * as winston from "winston";
import * as path from "path";
import "winston-daily-rotate-file";

interface LogError {
  message: string;
  stack?: string;
  name: string;
}

interface LogMetadata {
  error?: LogError | unknown;
  [key: string]: unknown;
}

enum LogLevel {
  ERROR = "error",
  INFO = "info",
  WARNING = "warning",
  DEBUG = "debug",
}

interface BotLogContext {
  userId?: number;
  chatId?: number;
  messageId?: number;
  questionId?: number;
  grade?: string;
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ Winston.
 * @class LogManager
 */
export default class LogManager {
  private static _instance: LogManager;
  private readonly _logger: winston.Logger;

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ LogManager (Singleton)
   * @public
   * @static
   * @returns {LogManager} –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   * @example
   * const logger = LogManager.getInstance();
   * logger.info("Application started");
   */
  public static getInstance(): LogManager {
    if (!LogManager._instance) {
      LogManager._instance = new LogManager();
    }
    return LogManager._instance;
  }

  /**
   * –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (Singleton pattern)
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–≥–µ—Ä–∞ —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞–º–∏ –¥–ª—è:
   * - –ö–æ–Ω—Å–æ–ª–∏ (—Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è development/production)
   * - –†–æ—Ç–∏—Ä—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
   * - –§–∞–π–ª–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏ rejection'–æ–≤
   * @private
   * @throws {Error} –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤
   */
  private constructor() {
    const logDir = path.resolve(process.cwd(), "source", "logs");
    this._logger = winston.createLogger({
      level: process.env.NODE_ENV === "product" ? "info" : "debug",
      format: winston.format.combine(
        winston.format.timestamp({
          format: "YYYY-MM-DD HH:mm:ss",
        }),
        winston.format.errors({ stack: true }),
        winston.format.json()
      ),
      defaultMeta: { service: "javascript-interview-bot" },
      /**
       * –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:
       * 1. Console - —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
       * 2. DailyRotateFile - —Ä–æ—Ç–∏—Ä—É–µ–º—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è application –ª–æ–≥–æ–≤
       * 3. DailyRotateFile - —Ä–æ—Ç–∏—Ä—É–µ–º—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è error –ª–æ–≥–æ–≤
       * 4. File - debug –ª–æ–≥–∏ —Ç–æ–ª—å–∫–æ –≤ –Ω–µ-production –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö
       */
      transports: [
        new winston.transports.Console({
          format: winston.format.combine(
            winston.format.colorize(),
            winston.format.printf(
              ({ timestamp, level, message, stack, ...meta }) => {
                return `${timestamp} ${level}: ${message} ${
                  stack ? `\n${stack}` : ""
                } ${Object.keys(meta).length ? JSON.stringify(meta, null, 2) : ""}`;
              }
            )
          ),
        }),
        new winston.transports.DailyRotateFile({
          filename: path.resolve(logDir, "application-%DATE%.log"),
          datePattern: "YYYY-MM-DD",
          maxSize: "10m",
          maxFiles: "30d",
          level: LogLevel.INFO,
        }),
        new winston.transports.DailyRotateFile({
          filename: path.resolve(logDir, "error-%DATE%.log"),
          datePattern: "YYYY-MM-DD",
          maxSize: "10m",
          maxFiles: "30d",
          level: LogLevel.ERROR,
        }),
        ...(process.env.NODE_ENV !== "product"
          ? [
              new winston.transports.File({
                filename: path.resolve(logDir, "debug.log"),
                level: LogLevel.DEBUG,
              }),
            ]
          : []),
      ],
      /**
       * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
       */
      exceptionHandlers: [
        new winston.transports.File({
          filename: path.join(logDir, "exceptions.log"),
        }),
      ],
      /**
       * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∫–∞–∑–æ–≤
       */
      rejectionHandlers: [
        new winston.transports.File({
          filename: path.join(logDir, "rejections.log"),
        }),
      ],
    });
    process.on("uncaughtException", (error) => {
      this.error("uncaughtException", error);
      process.exit(1);
    });
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
   * @public
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   * @param {Error | any} [error] - –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @param {BotLogContext} [context] - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @example
   * logger.error("Database connection failed", error, { userId: 123 });
   */
  public error(message: string, error?: Error, context?: BotLogContext): void {
    const metadata = this._prepareMetadata(error, context);
    const errorMess = "‚ùåÔ∏è" + message;
    this._logger.error(errorMess, metadata);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
   * @public
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
   * @param {BotLogContext} [context] - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @example
   * logger.warn("API rate limit approaching", { endpoint: "/users" });
   */
  public warn(message: string, context?: BotLogContext): void {
    const warnMess = "‚ö†Ô∏èÔ∏è" + message;
    this._logger.warn(warnMess, context);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   * @public
   * @param {string} message - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param {BotLogContext} [context] - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @example
   * logger.info("User registered successfully", { userId: 456 });
   */
  public info(message: string, context?: BotLogContext): void {
    const infoMess = "‚ÑπÔ∏è" + message;
    this._logger.info(infoMess, context);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   * @public
   * @param {string} message - –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param {BotLogContext} [context] - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @example
   * logger.debug("Database query executed", { queryTime: "120ms" });
   */
  public debug(message: string, context?: BotLogContext): void {
    const debugMess = "üßë‚ÄçüîßÔ∏è" + message;
    this._logger.debug(debugMess, context);
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
   * @private
   * @param {Error | unknown} [error] - –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
   * @param {BotLogContext} [context] - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   * @returns {LogMetadata} –û–±—ä–µ–∫—Ç —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
   */
  private _prepareMetadata(
    error?: Error | unknown,
    context?: BotLogContext
  ): LogMetadata {
    const metadata: LogMetadata = { ...context };
    if (error instanceof Error) {
      metadata.error = {
        message: error.message,
        stack: error.stack,
        name: error.name,
      };
    } else if (error) {
      metadata.error = error;
    }
    return metadata;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ —Å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   * @public
   * @param {BotLogContext} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
   * @returns {winston.Logger} –î–æ—á–µ—Ä–Ω–∏–π –ª–æ–≥–≥–µ—Ä Winston
   * @example
   * const userLogger = logger.child({ module: "user-service" });
   * userLogger.info("User created");
   */
  public child(context: BotLogContext): winston.Logger {
    return this._logger.child(context);
  }
}
