// TODO: 1. –°–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
// TODO: 2. –°–¥–µ–ª–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –∫–Ω–æ–ø–∫–∞–º
// TODO: 3. –°–¥–µ–ª–∞—Ç—å –∫–ª–∞—Å—Å Randomizer
// TODO: 4. –í—ã–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ Redis / MongoDB
// TODO: 5. –°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è Junior Javascript

import { Bot, Keyboard, InlineKeyboard, GrammyError, HttpError } from 'grammy';
import EnvironmentManager from "./classes/EnvironmentManager.js";
import Question from "./classes/Question.js";
import { EGrade } from "./types/questions";

//config app
const BOT_TOKEN = EnvironmentManager.getInstance().getVariable("BOT_TOKEN");
const bot = new Bot(BOT_TOKEN); // "BOT_TOKEN!" - "!" –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å
const question = new Question();

//start Bot
bot.start().then(r => r);

//commands
bot.command("start", async (ctx) => {
    const startKeyboard = new Keyboard()
        .text("Junior")
        .text("Middle")
        .text('Senior')
        .resized();

    await ctx.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ü—Ä–æ—Ñ–∏–¥–∂–µ–π, Javascript-–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Äü§ñ\n" +
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –Ω–∞ —Ä–∞–±–æ—Ç—É."
    );

    await ctx.reply(
        "–í—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞ –≤ –º–µ–Ω—é üëá",
        { reply_markup: startKeyboard }
    );
})

//hears
bot.hears(
    [
        EGrade.JUNIOR.toUpperCase(),
        EGrade.MIDDLE.toUpperCase(),
        EGrade.SENIOR.toUpperCase()
    ],
    async (ctx) => {
        const grade = ctx.message!.text;
        const data = question.getRandomQuestion(grade!);
        let inlineKeyboard = new InlineKeyboard();

        // –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ type guards —É–ø—Ä–æ—Å—Ç–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–æ–≤ –¥–ª—è —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞–µ–≤
        if (question.isClickQuestionType(data)) {
            const buttonRows =
                data.options.map(
                    (option) => [
                        InlineKeyboard
                            .text(
                                option.text!,
                                JSON.stringify(
                                    {
                                        type: `${grade}-option`,
                                        isCorrect: option.isCorrect,
                                        questionId: data.id
                                    }
                                )
                            )
                    ]
                );
            inlineKeyboard = InlineKeyboard.from(buttonRows);
        } else if (question.isAnswerQuestionType(data)) {
           inlineKeyboard
                .text(
                    "–£–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç",
                    JSON.stringify({
                        messageText: ctx.message!.text,
                        answer: data.answer,
                        questionId: data.id
                    })
                )
        }
        await ctx.reply(
            data.text,
            { reply_markup: inlineKeyboard }
        );
    }
);

//on handlers
bot.on("callback_query:data", async (ctx) => {
    const callbackData = JSON.parse(ctx.callbackQuery.data);
    //TODO: –î–æ–¥–µ–ª–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
});

//errors
bot.catch((botError) => {
    const ctx = botError.ctx;
    console.error(`‚ùå Error while handling update ${ctx.update.update_id}:`);
    const error = botError.error;
    if (error instanceof GrammyError) {
        console.error('‚ùå Error in request:', error.description);
    } else if (error instanceof HttpError) {
        console.error('‚ùå Could not contact Telegram:', error);
    } else {
        console.error('‚ùå Unknown error:', error);
    }
});
